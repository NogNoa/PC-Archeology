Line_pix = 320
line_byte = Line_pix // 4 = 80
col = size(file) / line_byte 

image[Line_pix, size(file) // line_byte + 2]

line_pix * (size(file) // line_byte + 2) =
line_pix * (size(file) // (Line_pix // 4)+ 2) =
size(file) // (1 // 4) + 2 * line_pix =
size(file) * 4 + 2 * line_pix

interlaced
field_byte_i = file_byte_i % field_sz
y = 2 * ( field_byte_i // line_sz) + field_i
field_sz = file_sz // 2
file_byte_i = field_byte_i + field_i * (file_sz // 2)
file_byte_i - field_byte_i = field_i * (file_sz // 2)
(file_byte_i - field_byte_i)/ (file_sz // 2) = field_i
y = 2 * ( field_byte_i // line_sz) + (file_byte_i - field_byte_i)/ (file_sz // 2)

y = 2 * ( (file_byte_i % field_sz) // line_sz) + field_i
y = 2 * ( (file_byte_i % (file_sz // 2)) // line_sz) + field_i
y = 2 * ( ((field_byte_i + field_i * (file_sz // 2)) % (file_sz // 2)) // line_sz) + field_i

progressive:
field_byte_i = file_byte_i
y = field_byte_i // line_sz

file = row[*]
row = letter[0x20]
letter = byte[8]
byte = col[8]

file = byte[0x400]

    for byte_i, byte in enumerate(call):
        letter_i = byte_i // 8
        y = byte_i % 8
        col = (letter_i) % 0x20
        row = (letter_i) // 0x20

file = field[2]
byte = field[field_sz]

 line_sz = math.ceil(width_pix / 4)
    hight = math.ceil(len(call) / line_sz) + 1
    image = Image.new("RGB", (width_pix, hight))
    pixels = image.load()
    field_sz = len(call) // 2
    for byte_i, byte in enumerate(call):
        field_i = byte_i // field_sz
        ...